package com.example.amazon_web_api_backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.io.File;
import java.util.*;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "http://localhost:8081")
public class AmazonOrderController {

    @Value("${amazon.access.token}")
    private String accessToken;

    private final RestTemplate restTemplate = new RestTemplate();
    private static final String BASE_URL = "https://sellingpartnerapi-na.amazon.com";
    private static final int MAX_ORDERS = 200;

    @GetMapping("/orders")
    public ResponseEntity<?> getOrders() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "application/json");
        headers.set("x-amz-access-token", accessToken);
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        List<Map<String, Object>> fullOrders = new ArrayList<>();
        ObjectMapper mapper = new ObjectMapper();

        String nextToken = null;
        int totalFetched = 0;

        try {
            do {
                UriComponentsBuilder builder;

                if (nextToken == null) {
                    builder = UriComponentsBuilder.fromHttpUrl(BASE_URL + "/orders/v0/orders")
                            .queryParam("MarketplaceIds", "ATVPDKIKX0DER")
                            .queryParam("CreatedAfter", "2024-01-01T00:00:00Z")
                            .queryParam("MaxResultsPerPage", 100);
                } else {
                    builder = UriComponentsBuilder.fromHttpUrl(BASE_URL + "/orders/v0/orders")
                            .queryParam("MarketplaceIds", "ATVPDKIKX0DER")
                            .queryParam("CreatedAfter", "2024-01-01T00:00:00Z")
                            .queryParam("MaxResultsPerPage", 100)
                            .queryParam("NextToken", nextToken);  // DO NOT encode manually
                    System.out.println(builder.toUriString());
                }

                ResponseEntity<Map> response = restTemplate.exchange(
                        builder.toUriString(), HttpMethod.GET, entity, Map.class
                );
                Map<String, Object> payloads = (Map<String, Object>) response.getBody().get("payload");
                if (payloads == null) break;

                nextToken = (String) payloads.get("NextToken");
                System.out.println(payloads.get("NextToken"));
                System.out.println(nextToken);
                System.out.println(builder.toUriString());
//                break;

                if (!response.getStatusCode().is2xxSuccessful()) {
                    throw new RuntimeException("Failed request: " + response.getStatusCode());
                }

                List<Map<String, Object>> orders = (List<Map<String, Object>>) payloads.get("Orders");
                if (orders == null || orders.isEmpty()) break;

                for (Map<String, Object> order : orders) {
                    if (totalFetched >= MAX_ORDERS) break;

                    String orderId = (String) order.get("AmazonOrderId");
                    Map<String, Object> fullOrder = new HashMap<>();
                    fullOrder.put("summary", order);

                    // Get order detail
                    try {
                        String detailUrl = BASE_URL + "/orders/v0/orders/" + orderId;
                        ResponseEntity<Map> detailRes = restTemplate.exchange(detailUrl, HttpMethod.GET, entity, Map.class);
                        fullOrder.put("detail", detailRes.getBody());
                    } catch (Exception ex) {
                        fullOrder.put("detail", Map.of("error", ex.getMessage()));
                    }

                    // Get order items
                    try {
                        String itemsUrl = BASE_URL + "/orders/v0/orders/" + orderId + "/orderItems";
                        ResponseEntity<Map> itemsRes = restTemplate.exchange(itemsUrl, HttpMethod.GET, entity, Map.class);
                        Map<String, Object> itemPayload = (Map<String, Object>) itemsRes.getBody().get("payload");

                        if (itemPayload != null && itemPayload.get("OrderItems") instanceof List<?>) {
                            List<Map<String, Object>> orderItems = (List<Map<String, Object>>) itemPayload.get("OrderItems");
                            fullOrder.put("items", orderItems);
                        } else {
                            fullOrder.put("items", List.of());
                        }
                    } catch (Exception ex) {
                        fullOrder.put("items", Map.of("error", ex.getMessage()));
                    }

                    fullOrders.add(fullOrder);
                    totalFetched++;
                }


            } while (nextToken != null && totalFetched < MAX_ORDERS);

            // Save result to file
            try {
                mapper.writerWithDefaultPrettyPrinter()
                        .writeValue(new File("orders.json"), fullOrders);
                System.out.println("✅ Saved orders.json with " + totalFetched + " orders.");
            } catch (Exception e) {
                System.err.println("❌ Failed to save JSON: " + e.getMessage());
            }

            return ResponseEntity.ok(fullOrders);

        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error fetching full Amazon orders: " + e.getMessage());
        }
    }
}
